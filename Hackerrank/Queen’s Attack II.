def queensAttack(n, k, r_q, c_q, obstacles):
    # directions: (row_step, col_step)
    directions = {
        "N": n - r_q,
        "S": r_q - 1,
        "E": n - c_q,
        "W": c_q - 1,
        "NE": min(n - r_q, n - c_q),
        "NW": min(n - r_q, c_q - 1),
        "SE": min(r_q - 1, n - c_q),
        "SW": min(r_q - 1, c_q - 1),
    }

    obstacle_set = {(r, c) for r, c in obstacles}

    for r_o, c_o in obstacle_set:
        if c_o == c_q:  # same column
            if r_o > r_q:  # north
                directions["N"] = min(directions["N"], r_o - r_q - 1)
            else:  # south
                directions["S"] = min(directions["S"], r_q - r_o - 1)
        elif r_o == r_q:  # same row
            if c_o > c_q:  # east
                directions["E"] = min(directions["E"], c_o - c_q - 1)
            else:  # west
                directions["W"] = min(directions["W"], c_q - c_o - 1)
        elif abs(r_o - r_q) == abs(c_o - c_q):  # diagonal
            if r_o > r_q and c_o > c_q:  # NE
                directions["NE"] = min(directions["NE"], r_o - r_q - 1)
            elif r_o > r_q and c_o < c_q:  # NW
                directions["NW"] = min(directions["NW"], r_o - r_q - 1)
            elif r_o < r_q and c_o > c_q:  # SE
                directions["SE"] = min(directions["SE"], c_q - c_o - 1)
            elif r_o < r_q and c_o < c_q:  # SW
                directions["SW"] = min(directions["SW"], r_q - r_o - 1)

    return sum(directions.values())
